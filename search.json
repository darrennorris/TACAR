[{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://darrennorris.github.io/TACAR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"organization","dir":"Articles","previous_headings":"","what":"Organization","title":"Matrix population model projections","text":"Split three parts: Projections ….. Scenario integration ……….. Results ………..","code":""},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"projections","dir":"Articles","previous_headings":"","what":"Projections","title":"Matrix population model projections","text":"Section objectives - Projection parameters Loads data frame population parameters explores structure stage-based matrix models. Projection models Run deterministic stochastic projections, combine results export future use. Model lookup Summarise projection models export future use scenario modelling.","code":""},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"packages","dir":"Articles","previous_headings":"Projections","what":"Packages","title":"Matrix population model projections","text":"","code":"library(plyr) library(dplyr) library(popdemo) library(popbio) library(Rcompadre) library(Rage) library(TACAR) library(readxl) library(ggplot2)"},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"projection-parameters-","dir":"Articles","previous_headings":"Projections","what":"Projection parameters.","title":"Matrix population model projections","text":"row holds unique set parameters matrix population model. reflects diverse recovery (conservation action) extinction (threat) scenarios. row can easily converted use stage-based matrix population model. following code shows third row becomes stage-based matrix. matrix includes information population growth survival reproduction. See https://cran.r-project.org/web/packages/Rage/vignettes/a01_GettingStarted.html can show different matrix components converting structure recommended … Now built matrix can obtain many useful summaries using Rage (https://jonesor.github.io/Rage/). can get life history metrics including generation time life expectancy. can also plot life cycle diagram.","code":"dt <- pop01_param_poun() nf <- 10 dt$adultF_n <- nf ceiling_threshold <- nf + (nf * 0.2) stage_names <- c(\"a1\", \"a2\", \"a3\", \"a4\",                    \"b1\", \"b2\", \"b3\", \"b4\",                    \"c1\", \"c2\", \"c3\", \"c4\",                    \"d1\", \"d2\", \"d3\", \"d4\") vpop <- unlist(dt[3 , stage_names]) pop_mat <- matrix(vpop, byrow = TRUE, ncol=4) dimnames(pop_mat) <- list(c(\"a\", \"b\", \"c\", \"d\"),                             c( \"a\", \"b\", \"c\", \"d\")) meta <- data.frame(idNum = 3,                     SpeciesAccepted = dt[3 , 'species'],                    type = dt[3 , 'type'],                     first_year = dt[3 , 'first_year'])  stageInfo <- list(   data.frame(     MatrixClassOrganized = rep(\"active\", 4),     MatrixClassAuthor = c(\"eggs/hatchling\", \"juvenile-early\", \"juvenile-late\", \"adult\")   )) # Simple full A matrix l_pop_mat <- list(mpm = pop_mat) x <- Rcompadre::cdb_build_cdb(mat_a = l_pop_mat, metadata = meta, stages = stageInfo)  # Seperate into U (growth/survival), F (sexual reproduction), C (clonal reproduction) mat_u1 <- rbind(   c(dt[3, 'a1'], dt[3, 'a2'], dt[3, 'a3'], 0),   c(dt[3, 'b1'], dt[3, 'b2'], dt[3, 'b3'], dt[3, 'b4']),   c(dt[3, 'c1'], dt[3, 'c2'], dt[3, 'c3'], dt[3, 'c4']),   c(dt[3, 'd1'], dt[3, 'd2'], dt[3, 'd3'], dt[3, 'd4']) ) mat_f1 <- rbind(   c(0.0, 0.0, 0.0, dt[3, 'a4']),   c(0.0, 0.0, 0.0, 0.0),   c(0.0, 0.0, 0.0, 0.0),    c(0.0, 0.0, 0.0, 0.0) ) mat_c1 <- rbind(   c(0.0, 0.0, 0.0, 0.0),   c(0.0, 0.0, 0.0, 0.0),   c(0.0, 0.0, 0.0, 0.0),    c(0.0, 0.0, 0.0, 0.0) ) l_u <- list(m_u = mat_u1) l_f <- list(m_f = mat_f1) l_c <- list(m_c = mat_c1)  my_comadre <- Rcompadre::cdb_build_cdb(   mat_u = l_u, mat_f = l_f, mat_c = l_c,   metadata = meta,    stages = stageInfo ) # the time required for a population to  # increase by a factor of R0 (the net reproductive rate) Rage::gen_time(matU = matU(my_comadre)[[1]], matF(my_comadre)[[1]]) # 17.15 #> [1] 17.15455 # the average parent-offspring age difference # 16.22 Rage::gen_time(matU = matU(my_comadre)[[1]], matF(my_comadre)[[1]], method = \"age_diff\") #> [1] 16.22243 # expected age at reproduction for a cohort 5.69 Rage::gen_time(matU = matU(my_comadre)[[1]], matF(my_comadre)[[1]], method = \"cohort\") #> [1] 5.696541  Rage::life_expect_mean(matU = matU(my_comadre)[[1]], start = 1) #> [1] 1.484286 sum(Rage::life_expect_mean(matU(my_comadre)[[1]], start = NULL)) #> [1] 21.87715 Rage::plot_life_cycle(matA = matA(my_comadre)[[1]],                  stages = c(\"eggs/hatchling\", \"juvenile-early\", \"juvenile-late\", \"adult\"))"},{"path":[]},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"deterministic-models","dir":"Articles","previous_headings":"Projections > Projection models.","what":"Deterministic models","title":"Matrix population model projections","text":"","code":"# project dout <- plyr::ddply(dt,                      c(\"species\", \"type\", \"first_year\",\"akey\"), .fun =  pop03_doproj) dout$arun <- 1  # Model summaries model_sum <- dout |>    group_by(species, type, first_year, lambda,             gen_time, gen_age_diff, life_exp, life_exp_adult, mat_prob, eggs_to_adult) |>    summarise(fem_t0 = max(fem_t0),              fem_min = min(fem),               fem_max = max(fem)) |>    ungroup() lambda_n <- length(unique(model_sum$lambda)) # 50 lambda_mean <- mean(model_sum$lambda) # 0.9432 lambda_sd <- sd(model_sum$lambda) # 0.1506 lambda_min <- min(model_sum$lambda) # 0.4659 lambda_max <- max(model_sum$lambda) # 1.1539  # Export for future use saveRDS(dout, \"inst/other/dout.rds\")"},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"stochastic-models","dir":"Articles","previous_headings":"Projections > Projection models.","what":"Stochastic models","title":"Matrix population model projections","text":"","code":"# Stochastic #data frame with runs for processing #nruns <- 100 # 100 gives same pattern as 50 nruns <- 50 dt_stoch <- dt[rep(seq_len(nrow(dt)), nruns), ] dt_stoch$arun <- rep(1:nruns, each = nrow(dt)) # Approx 90 minutes. 1,212,000 rows. Projections quick. Summaries slow. # 11:32 - 13:14 dout_stoch <- plyr::ddply(dt_stoch,                      c(\"arun\", \"species\", \"type\", \"first_year\",\"akey\"),                      .fun =  pop03_doproj_stoch) table(dout_stoch$model) table(dout_stoch$type) model_sum_stoch <- dout_stoch |>    group_by(species, type, model, first_year, lambda, lambda_q75,            gen_time, gen_age_diff_med, gen_age_q75,             life_exp_med, life_exp_adult_med, mat_prob_med, mat_prob_q75,             eggs_to_adult_med, eggs_to_adult_q75) |>    summarise(acount = n(),              fem_t0 = max(fem_t0),              fem_min = min(fem),               fem_max = max(fem)) |>    ungroup() # Export for future use saveRDS(dout_stoch, \"inst/other/dout_stoch.rds\")"},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"combine-results-","dir":"Articles","previous_headings":"Projections > Projection models.","what":"Combine results.","title":"Matrix population model projections","text":"","code":"dout <- readRDS(\"inst/other/dout.rds\") dout_stoch <- readRDS(\"inst/other/dout_stoch.rds\") # Combine data for plotting dout_all <- dplyr::bind_rows(dout |> dplyr::select(arun, model, type, first_year,                                                     akey, ayear,                                                     lambda, gen_time, gen_age_diff,                                                     life_exp, life_exp_adult,                                                     mat_prob, eggs_to_adult,                                             fem, fem_t0, fem_diff, change50_flag,                                              change30_flag,                                             double_flag) |>                                 dplyr::mutate(lambda_lcl = NA, lambda_ucl = NA,                                               lambda_sd = NA,  gen_sd = NA),                               dout_stoch |> dplyr::select(arun, model, type, first_year,                                                           akey, ayear,                                                           lambda, lambda_lcl, lambda_ucl,                                                           lambda_sd, gen_time, gen_sd,                                                           gen_age_diff,                                                     life_exp, life_exp_adult,                                                     mat_prob, eggs_to_adult,                                             fem, fem_t0, fem_diff, change50_flag,                                              change30_flag,                                             double_flag)) # Limit adult female number to maximum (20% above original for baseline). summary(dout_all$fem) #    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #       0        0        1     1389       11 16560701 dout_all[which(dout_all$fem > ceiling_threshold), 'fem' ] <- ceiling_threshold # summary(dout_all$fem) #     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  # 0.000000  0.005763  1.485889  4.522590 11.240127 12.000000    # Factors in right order dout_all$modelf <- 1 dout_all[which(dout_all$model==\"Stochastic uniform\") , 'modelf'] <- 2 dout_all[which(dout_all$model==\"Stochastic equal\") , 'modelf'] <- 3 dout_all[which(dout_all$model==\"Stochastic bad x2\") , 'modelf'] <- 4 dout_all[which(dout_all$model==\"Stochastic bad x4\") , 'modelf'] <- 5 dout_all$modelf <- as.factor(dout_all$modelf) levels(dout_all$modelf) <- c(\"Deterministic\", \"Stochastic uniform\",                            \"Stochastic equal\", \"Stochastic bad x2\",                            \"Stochastic bad x4\") unique(dout_all$modelf) table(dout_all$modelf) dout_all$typef <- 1 dout_all[which(dout_all$type==\"female-hunt 2.5%\") , 'typef'] <- 2 dout_all[which(dout_all$type==\"female-hunt 5%\") , 'typef'] <- 3 dout_all[which(dout_all$type==\"female-hunt 10%\") , 'typef'] <- 4 dout_all[which(dout_all$type==\"female-hunt 25%\") , 'typef'] <- 5 dout_all[which(dout_all$type==\"female-hunt 50%\") , 'typef'] <- 6 dout_all$typef <- as.factor(dout_all$typef) levels(dout_all$typef) <- c(\"base\", \"female-hunt 2.5%\",                              \"female-hunt 5%\",                           \"female-hunt 10%\", \"female-hunt 25%\",                            \"female-hunt 50%\") table(dout_all$typef) # first year survival dout_all$first_yearf <- as.factor(dout_all$first_year) fylev <- paste(\"first-year\\nsurvival\\n\", seq(0, 0.9, by = 0.1), sep = \"\") levels(dout_all$first_yearf) <- fylev # Export for future use. 17/6/2024 - 1,218,060 rows 21 columns. saveRDS(dout_all, \"inst/other/dout_all.rds\")"},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"model-lookup","dir":"Articles","previous_headings":"Projections","what":"Model lookup","title":"Matrix population model projections","text":"Model summaries link scenarios. Summaries across stochastic runs model. Red List guidelines p38 example, upper lower quartiles projected magnitude future reduction (.e., reductions 25% 75% probability) may considered represent plausible range projected reduction Green Status Presence Present population least 1 measured lower quartile population. Green Status Viability Viable declining: lower quartile lambda >= 1. species considered viable spatial unit application Regional Red List Guidelines population spatial unit result categorization ‘Least Concern’ ‘Near Threatened Declining’. Green Status Functional Functional population lower quartile 10 times base level.","code":"# load data. 2 August 2024 with 1218060 rows and 21 columns dout_all <- readRDS(\"inst/other/dout_all.rds\") # 101 years, 5 model types (deterministic with 6060, stochastic with 6060 * 50),  # 6 harvest levels, 10 first year levels # Make unique model ID. boot mean is same as mean (at least to 6 decimal places) # 300 projection models. model_ref <- dout_all |>   group_by(akey, modelf, typef, first_year, arun, lambda, gen_time,             gen_age_diff, life_exp, life_exp_adult, eggs_to_adult) |>    summarise(yc = length(unique(ayear))) |>    ungroup() |>    group_by(akey, modelf, typef, first_year) |>   summarise(count_runs = length(unique(arun)),              count_years = min(yc),             lambda_mean = mean(lambda),              lambda_min = min(lambda),              lambda_max = max(lambda),              lambda_sd = sd(lambda),             lambda_boot_lcl = Hmisc::smean.cl.boot(lambda)[\"Lower\"],             lambda_boot_ucl = Hmisc::smean.cl.boot(lambda)[\"Upper\"],              lambda_q25 = quantile(lambda, probs = 0.25, na.rm = TRUE),             lambda_q75 = quantile(lambda, probs = 0.75, na.rm = TRUE),              gen_mean = mean(gen_time),              gen_med = median(gen_time),             gen_min = min(gen_time),              gen_max = max(gen_time),              gen_sd = sd(gen_time),             gen_boot_lcl = Hmisc::smean.cl.boot(gen_time)[\"Lower\"],             gen_boot_ucl = Hmisc::smean.cl.boot(gen_time)[\"Upper\"],              gen_q25 = quantile(gen_time, probs = 0.25, na.rm = TRUE),             gen_q75 = quantile(gen_time, probs = 0.75, na.rm = TRUE),              gen_age_mean = mean(gen_age_diff),              gen_age_med = median(gen_age_diff),             gen_age_min = min(gen_age_diff),              gen_age_max = max(gen_age_diff),              gen_age_sd = sd(gen_age_diff),             gen_age_boot_lcl = Hmisc::smean.cl.boot(gen_age_diff)[\"Lower\"],             gen_age_boot_ucl = Hmisc::smean.cl.boot(gen_age_diff)[\"Upper\"],              gen_age_q25 = quantile(gen_age_diff, probs = 0.25, na.rm = TRUE),             gen_age_q75 = quantile(gen_age_diff, probs = 0.75, na.rm = TRUE),              life_exp_mean = mean(life_exp),              life_exp_med = median(life_exp),             life_exp_min = min(life_exp),              life_exp_max = max(life_exp),              life_exp_sd = sd(life_exp),             life_exp_boot_lcl = Hmisc::smean.cl.boot(life_exp)[\"Lower\"],             life_exp_boot_ucl = Hmisc::smean.cl.boot(life_exp)[\"Upper\"],              life_exp_q25 = quantile(life_exp, probs = 0.25, na.rm = TRUE),             life_exp_q75 = quantile(life_exp, probs = 0.75, na.rm = TRUE),              life_exp_adult_mean = mean(life_exp_adult),              life_exp_adult_med = median(life_exp_adult),             life_exp_adult_min = min(life_exp_adult),              life_exp_adult_max = max(life_exp_adult),              life_exp_adult_sd = sd(life_exp_adult),             life_exp_adult_boot_lcl = Hmisc::smean.cl.boot(life_exp_adult)[\"Lower\"],             life_exp_adult_boot_ucl = Hmisc::smean.cl.boot(life_exp_adult)[\"Upper\"],              life_exp_adult_q25 = quantile(life_exp_adult, probs = 0.25, na.rm = TRUE),             life_exp_adult_q75 = quantile(life_exp_adult, probs = 0.75, na.rm = TRUE),             eggs_to_adult_mean = mean(eggs_to_adult),              eggs_to_adult_med = median(eggs_to_adult),             eggs_to_adult_min = min(eggs_to_adult),              eggs_to_adult_max = max(eggs_to_adult),              eggs_to_adult_sd = sd(eggs_to_adult),             eggs_to_adult_boot_lcl = Hmisc::smean.cl.boot(eggs_to_adult)[\"Lower\"],             eggs_to_adult_boot_ucl = Hmisc::smean.cl.boot(eggs_to_adult)[\"Upper\"],              eggs_to_adult_q25 = quantile(eggs_to_adult, probs = 0.25, na.rm = TRUE),             eggs_to_adult_q75 = quantile(eggs_to_adult, probs = 0.75, na.rm = TRUE)                          ) |>    ungroup() |>    arrange(typef, first_year, modelf) |>   mutate(modelid = paste(akey, as.numeric(modelf), sep = \"_\"),           modelkey = row_number()) |>    relocate(modelkey, modelid)  # Estimates of generation time for summary. # Bienvenu and Legendre (2015) https://doi.org/10.1086%2F681104 -  # defined as the mean age of mothers at birth. # IUCN definition - is the mean age at which a cohort of individuals produce offspring. gen_mean <- model_ref |>    filter(lambda_q75 >= 1, first_year < 0.5) |> pull(gen_age_mean) |> mean() gen_median <- model_ref |>    filter(lambda_q75 >= 1, first_year < 0.5) |> pull(gen_age_mean) |> median() gen_q25 <- model_ref |>    filter(lambda_q75 >= 1, first_year < 0.5) |> pull(gen_age_mean) |>    quantile(probs = 0.25) gen_q75 <- model_ref |>    filter(lambda_q75 >= 1, first_year < 0.5) |> pull(gen_age_mean) |>    quantile(probs = 0.75) gen_3 <- gen_mean * 3 gen_3_q25 <- gen_q25 * 3 gen_3_q75 <- gen_q75 * 3  # Add population changes. model_ref2 <- model_ref |> left_join(dout_all |>   filter(ayear %in% c(ceiling(gen_3), ceiling(gen_3_q25), ceiling(gen_3_q75), 100)) |>    group_by(akey, modelf, typef, first_year, ayear, arun) |>    summarise(fem_t0 = mean(fem_t0),              femnew = mean(fem),             femnew_diff = mean(fem_diff)   ) |>      ungroup() |>    group_by(akey, modelf, typef, first_year, ayear) |>    summarise(fem_t0 = mean(fem_t0),              fem = mean(femnew),             fem_sd = sd(femnew, na.rm = TRUE),              fem_q25 = quantile(femnew, probs = 0.25, na.rm = TRUE),             fem_q75 = quantile(femnew, probs = 0.75, na.rm = TRUE),             fem_diff = mean(femnew_diff),              fem_diff_sd = sd(femnew_diff, na.rm = TRUE),              fem_diff_q25 = quantile(femnew_diff, probs = 0.25, na.rm = TRUE),             fem_diff_q75 = quantile(femnew_diff, probs = 0.75, na.rm = TRUE)) |>    ungroup() |>      mutate(ayear = paste(\"t\", ayear, sep=\"\")) |>   pivot_wider(names_from = ayear,                 values_from = c(fem, fem_sd, fem_q25, fem_q75, fem_diff,                                 fem_diff_sd, fem_diff_q25, fem_diff_q75)) |>    arrange(typef, first_year, modelf) )  # Add time to change by 50% and 30%  model_ref3 <- model_ref2 |>    left_join(dout_all |>    filter(change50_flag == 1) |>  group_by(akey, modelf, typef, first_year, arun,            change50_flag) |>   summarise(acount = n(),              change50_yf = min(ayear),              change50_yl = max(ayear)) |>    ungroup() |>    group_by(akey, modelf, typef, first_year) |>    summarise(change50_ymean = floor(mean(change50_yf)),              change50_ysd = sd(change50_yf),              change50_yq25 = floor(quantile(change50_yf, probs = 0.25, na.rm = TRUE)),             change50_yq75 = floor(quantile(change50_yf, probs = 0.75, na.rm = TRUE))) |>     ungroup() ) |> left_join(dout_all |>    filter(change30_flag == 1) |>  group_by(akey, modelf, typef, first_year, arun,            change30_flag) |>   summarise(acount = n(),              change30_yf = min(ayear),              change30_yl = max(ayear)) |>    ungroup() |>    group_by(akey, modelf, typef, first_year) |>    summarise(change30_ymean = floor(mean(change30_yf)),              change30_ysd = sd(change30_yf),              change30_yq25 = floor(quantile(change30_yf, probs = 0.25, na.rm = TRUE)),             change30_yq75 = floor(quantile(change30_yf, probs = 0.75, na.rm = TRUE))) |>     ungroup() )  # Export for future use saveRDS(model_ref3, \"inst/other/model_lookup.rds\")  write.csv2(model_ref3, \"inst/other/model_lookup.csv\", row.names = FALSE)"},{"path":[]},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"section-objective","dir":"Articles","previous_headings":"Scenario integration","what":"Section objective","title":"Matrix population model projections","text":"Integrate point locations population projections. Specifically: Join point scenarios population projections. Generate data used summaries. Make summaries. Create results presentation.","code":""},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"join-with-scenarios","dir":"Articles","previous_headings":"Scenario integration","what":"Join with scenarios","title":"Matrix population model projections","text":"Load projection model lookup table. Now join.","code":"# point data # load points made previously in prep_river_points.Rmd. RIVORD 1 to 5.  # Cropped to basins from Norris et. al. 2019. ffr_1a5_poun_points_3395 <- sf::st_read(dsn = system.file(\"vector/poun_river_points_v2.gpkg\", package=\"TACAR\"),                                     layer = \"ffr_1a5_poun_points_3395\") #> Reading layer `ffr_1a5_poun_points_3395' from data source  #>   `/home/runner/work/_temp/Library/TACAR/vector/poun_river_points_v2.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 353437 features and 46 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -8839379 ymin: -2162255 xmax: -4738776 ymax: 1094857 #> Projected CRS: WGS 84 / World Mercator # projections and scenarios # model_lookup has results from 300 population projection models created previously model_lookup <- readRDS(system.file(\"other/model_lookup.rds\", package = \"TACAR\")) # actions has scenarios with link to river points and associated projection models actions <- readxl::read_excel(system.file(\"other/Podocnemis_conservation_actions.xlsx\", package = \"TACAR\"),                        sheet = \"scenario_parameters\", .name_repair = \"universal\") #> New names: #> • `Podocnemis modelling scenario` -> `Podocnemis.modelling.scenario` #> • `Population perturbation parameter changes (BAU).` -> #>   `Population.perturbation.parameter.changes..BAU..` # Here 3 versions - modelkey pess, BAU, optimistic. ### 1060311 rows 6/8/2024 scenario_ffr_res <- ffr_1a5_poun_points_3395 |> data.frame() |>    #filter(subbasn == \"Trombetas\") |>   mutate(Protected = if_else(All == 1, \"yes\", \"no\"),           Protected_cat = case_when(Indigenous == 1 ~ \"TI\",                                     Strict == 1 ~ \"SP\",                                     myuse == 1 ~ \"SU\",                                     .default = \"no\"                                    ),           Accessible = if_else(access_new == 0, \"no\", \"yes\"),           Free_flowing = if_else(CSI >= 0.92, \"yes\", \"no\")          ) |> left_join(             actions |>    filter(Podocnemis.modelling.scenario == \"Protection\") |>    pivot_longer(cols = starts_with(\"modelkey\"), names_to = \"model_name\",                 values_to = \"modelkey\") |>    left_join(model_lookup, by = join_by(modelkey == modelkey)              ),    by = c(\"Protected\" = \"Protected\", \"Protected_cat\" = \"Protected_cat\",           \"Accessible\" = \"Accessible\",           \"Free_flowing\" = \"Free_flowing\"),    relationship = \"many-to-many\"            ) |>    filter(!is.na(lambda_mean)) |> # where points do not overlap new basins   mutate(flag_b = paste(BASIN_NAME, subbasin, sep=\"_\")) # should be zero rows if join worked.  test_join <- scenario_ffr_res |>    filter(is.na(lambda_mean)) |> nrow() # This file is used in testmap. 1060311 rows 6/8/2024. saveRDS(scenario_ffr_res, \"inst/other/scenario_res_ffr1a5.rds\")"},{"path":"https://darrennorris.github.io/TACAR/articles/Matrix-population-model-projections.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Matrix population model projections","text":"Load data. Make summary population changes. Now plot. Check plot.  shaded shapes figure show predicted population changes basin-country combination. labels right show river lengths thousands kilometers (e.g. “26.1” 26,100 kilometers). vertical dashed line shows overall mean value, verticle grey shaded area interquartile range (IQR). basin-country combinations cover different areas, calculations mean IQR obtained using estimates weighted river length. population change “-0.5” 50% loss. Amazon Basin Brazil represents largest proportion rivers (51.1%). Considering spatial variation threats population genetics, probably useful include Amazon Basin seperated major basins (Madeira, Negro, etc). summaries presented provide general overview enable robust assessment results. Additionally, overall patterns change Amazon basin seperated .","code":"fin <- system.file(\"other/scenario_res_ffr1a5.rds\", package = \"TACAR\") scenario_ffr_res <- readRDS(fin) # Make factors scenario_ffr_res$model_namef <- factor(scenario_ffr_res$model_name) #levels(scenario_ffr_res$model_namef) scenario_ffr_res$model_namef <- relevel(scenario_ffr_res$model_namef, ref = \"modelkey_pessimistic\") scenario_ffr_res$modelidf <- factor(scenario_ffr_res$modelid) # scale value range diff_min <- min(scenario_ffr_res$fem_diff_t45, na.rm = TRUE) diff_max <- max(scenario_ffr_res$fem_diff_t45, na.rm = TRUE) # Test with smaller subset. df <- scenario_ffr_res |>    dplyr::filter(COUNTRY == \"French Guiana\") # Unique groups df |> dplyr::group_by(COUNTRY, BASIN_NAME, subbasin,                  reach_id_point,          model_name, modelkey, modelid, typef) |>    dplyr::summarise(acount = dplyr::n()) |>    dplyr::arrange(dplyr::desc(acount)) #> `summarise()` has grouped output by 'COUNTRY', 'BASIN_NAME', 'subbasin', #> 'reach_id_point', 'model_name', 'modelkey', 'modelid'. You can override using #> the `.groups` argument. #> # A tibble: 9,894 × 9 #> # Groups:   COUNTRY, BASIN_NAME, subbasin, reach_id_point, model_name, #> #   modelkey, modelid [9,894] #>    COUNTRY  BASIN_NAME subbasin reach_id_point model_name modelkey modelid typef #>    <chr>    <chr>      <chr>    <chr>          <chr>         <dbl> <chr>   <fct> #>  1 French … Coastal N… Coastal… 60154000_1     modelkey_…      112 poun_f… fema… #>  2 French … Coastal N… Coastal… 60154000_1     modelkey_…       62 poun_f… fema… #>  3 French … Coastal N… Coastal… 60154000_1     modelkey_…      107 poun_f… fema… #>  4 French … Coastal N… Coastal… 60154000_2     modelkey_…      112 poun_f… fema… #>  5 French … Coastal N… Coastal… 60154000_2     modelkey_…       62 poun_f… fema… #>  6 French … Coastal N… Coastal… 60154000_2     modelkey_…      107 poun_f… fema… #>  7 French … Coastal N… Coastal… 60154920_1     modelkey_…      107 poun_f… fema… #>  8 French … Coastal N… Coastal… 60154920_1     modelkey_…      112 poun_f… fema… #>  9 French … Coastal N… Coastal… 60154920_1     modelkey_…      157 poun_f… fema… #> 10 French … Coastal N… Coastal… 60154920_2     modelkey_…      112 poun_f… fema… #> # ℹ 9,884 more rows #> # ℹ 1 more variable: acount <int>  # Frequency distribution of points among scenarios df |>    dplyr::mutate(modelidf = forcats::fct_reorder(modelidf, lambda_mean)) |>   dplyr::group_by(modelkey, modelidf, model_namef) |>    dplyr::tally() |>   tidyr::pivot_wider(names_from = model_namef,                       values_from = n, values_fill = 0) #> # A tibble: 5 × 5 #> # Groups:   modelkey, modelidf [5] #>   modelkey modelidf        modelkey_pessimistic modelkey_BAU modelkey_optimistic #>      <dbl> <fct>                          <int>        <int>               <int> #> 1       12 poun_base_0.2_2                 1216         1216                1250 #> 2       62 poun_female-hu…                    0           34                 765 #> 3      107 poun_female-hu…                  799         1283                   0 #> 4      112 poun_female-hu…                    0          765                1283 #> 5      157 poun_female-hu…                 1283            0                   0 # Not used. This gives range but is very narrow df_long <- scenario_ffr_res |> dplyr::select(COUNTRY, BASIN_NAME, subbasin,                  reach_id_point,          model_name, modelkey, modelid, typef,           fem_t0, fem_t35, fem_t41, fem_t45) |>   tidyr::pivot_longer(cols = c(fem_t35, fem_t41, fem_t45),                        names_to = \"gen_t3\",                        values_to = \"fem_tot\")  # Randomized resample to get quantile distribution. # Sample Function resample_and_calculate_change <- function(df, sample_percent = NA,                                            sample_size = NA,                                            col1, col2) {   # sample   if(!is.na(sample_size)){      sampled_df <- df |>      dplyr::slice_sample(n = sample_size, replace = TRUE)      }else{   sampled_df <- df |>      dplyr::slice_sample(prop = (sample_percent / 100))      }   # calculate change   tot_tstart <- sum(sampled_df[ , col1])    tot_tend <- floor(sum(sampled_df[ , col2]))    pop_change <- (tot_tend - tot_tstart) / tot_tstart   return(pop_change) }  set.seed(123)  # For reproducibility # 1000 and 10000 give very similar result res_random <- replicate(1000,                        resample_and_calculate_change(df = df_long,                                                      sample_percent = 1,                                                        col1 = \"fem_t0\",                                                      col2 = \"fem_tot\"))  # -0.5060417 pop_change_mean <- mean(res_random) # -0.5061052 pop_change_median <- median(res_random) # -0.5077871  pop_change_q25 <- quantile(res_random, probs =0.25) # -0.504105 pop_change_q75 <- quantile(res_random, probs =0.75) df_country_basin <- scenario_ffr_res |>    #dplyr::filter(BASIN_NAME == \"Coastal North\") |> # track why have 1 Coastal South   dplyr::mutate(modelidf = forcats::fct_reorder(modelidf, lambda_mean),                  basin_country = paste(BASIN_NAME, COUNTRY, sep =\"\\n\")) |>    dplyr::group_by(basin_country, COUNTRY, BASIN_NAME,                    model_namef) |>    dplyr::summarise(acount = dplyr::n(),                     tot_t0 = sum(fem_t0),                    diff_t35 = (sum(fem_t35) - sum(fem_t0)) / sum(fem_t0),                    diff_t41 = (sum(fem_t41) - sum(fem_t0)) / sum(fem_t0),                     diff_t45 = (sum(fem_t45) - sum(fem_t0)) / sum(fem_t0)    ) |> dplyr::ungroup() |>    dplyr::filter(acount > 21) |>   tidyr::pivot_longer(cols = starts_with(\"diff_\"), names_to = \"gen_t3\",                        values_to = \"fem_diff\") #> `summarise()` has grouped output by 'basin_country', 'COUNTRY', 'BASIN_NAME'. #> You can override using the `.groups` argument. # Make weights df_country_basin$wt <- df_country_basin$acount / sum(df_country_basin$acount) # make sure to avoid these # |>  #  filter(length_river > 21) |>   # droplevels() |>  # Now get interquartile range for all.  df_iqr <- data.frame(     y = median(df_country_basin$fem_diff),     ymin = quantile(df_country_basin$fem_diff, probs = 0.25),     ymax = quantile(df_country_basin$fem_diff, probs = 0.75)   ) # Weighted interqantile range mean_wt <- Hmisc::wtd.mean(x = df_country_basin$fem_diff,                                w = df_country_basin$acount) iqr_wt_25 <- Hmisc::wtd.quantile(x = df_country_basin$fem_diff,                                w = df_country_basin$acount, probs = 0.25) iqr_wt_75 <- Hmisc::wtd.quantile(x = df_country_basin$fem_diff,                                w = df_country_basin$acount, probs = 0.75)  # Total river lengths river_tot <- df_country_basin |>    dplyr::group_by(basin_country, COUNTRY, BASIN_NAME, acount) |>    dplyr::summarise(atmp = dplyr::n()) |>    dplyr::ungroup() |>    dplyr::mutate(length_label = paste(round((acount / 1000), 1), \"K km\")) #> `summarise()` has grouped output by 'basin_country', 'COUNTRY', 'BASIN_NAME'. #> You can override using the `.groups` argument.  #  river_totkm <- river_tot |>    dplyr::pull(acount) |> sum()  river_amazon_brazil <-   river_tot |>   dplyr::filter(COUNTRY == \"Brazil\", BASIN_NAME == \"Amazon\") |>    droplevels() |>    dplyr::pull(acount) |> sum()  river_amazon_brazil_prop <- round(((river_amazon_brazil / river_totkm) * 100), 1) # Define function to calculate IQR at given quantiles iqr = function(z, lower = 0.25, upper = 0.75) {   data.frame(     y = median(z),     ymin = quantile(z, lower),     ymax = quantile(z, upper)   ) }  stat_sum_df <- function(fun, geom=\"crossbar\", ...) {   stat_summary(fun.data = fun, colour = \"black\", geom = geom, width = 0.4, ...) }  # Plot points summarised with standard IQR fig_basin_country <- ggplot2::ggplot(data = df_country_basin,                  mapping = aes(x = basin_country, y = fem_diff)) +    #stat_summary(fun.data = iqr)    geom_hline(yintercept = 0, colour = \"black\") +   annotate(xmin=-Inf, xmax=Inf,             ymin = iqr_wt_25, ymax = iqr_wt_75,             fill=\"grey80\", geom = 'rect', alpha=0.4) +    geom_hline(yintercept = mean_wt, colour = \"black\",               linetype = \"dashed\") +   stat_sum_df(\"iqr\") +    geom_jitter(aes(shape = gen_t3, colour = model_namef),                width = 0.1, height = 0) +    scale_y_continuous(limits = c(diff_min, diff_max)) +    geom_label(data = river_tot,               aes(x = basin_country, y = 0.2, label = length_label)) +   coord_flip() +   scale_shape(name=\"three\\ngenerations\",                          breaks=c(\"diff_t35\", \"diff_t41\", \"diff_t45\"),                          labels=c(\"35 Y\", \"41 Y\", \"45 Y\")) +    scale_colour_viridis_d(name=\"model\\nscenarios\",                          breaks=c(\"modelkey_pessimistic\", \"modelkey_BAU\", \"modelkey_optimistic\"),                          labels=c(\"pessimistic\", \"BAU\", \"optimistic\")) +    labs(y = \"Population change\", x = \"\") +    theme_bw() +   theme(legend.position = \"bottom\")  # Export for future use png(file = \"vignettes/fig_basin_country_summary.png\", bg = \"transparent\",      type = c(\"cairo\"),      width = 8, height = 8, units = \"in\", res=600) fig_basin_country invisible(dev.off())"},{"path":"https://darrennorris.github.io/TACAR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Darren Norris. Author, maintainer.","code":""},{"path":"https://darrennorris.github.io/TACAR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Norris D (2024). TACAR: Functions support Community Based Mangement Amazonian River Turtles. R package version 0.0.0.9000, https://darrennorris.github.io/TACAR/.","code":"@Manual{,   title = {TACAR: Functions to support the Community Based Mangement of Amazonian River Turtles},   author = {Darren Norris},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://darrennorris.github.io/TACAR/}, }"},{"path":"https://darrennorris.github.io/TACAR/index.html","id":"tacar","dir":"","previous_headings":"","what":"Functions to support the Community Based Mangement of Amazonian River Turtles","title":"Functions to support the Community Based Mangement of Amazonian River Turtles","text":"goal TACAR support Community Based Mangement Amazonian River Turtles. TACAR: (Tortugas de la Amazonia: Comunidades y Análisis en R / Tartarugas da Amazônia: Comunidades e Análise em R). Updated extended version cmartr….","code":""},{"path":"https://darrennorris.github.io/TACAR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to support the Community Based Mangement of Amazonian River Turtles","text":"can install development version TACAR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"darrennorris/TACAR\")"},{"path":"https://darrennorris.github.io/TACAR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions to support the Community Based Mangement of Amazonian River Turtles","text":"basic example shows solve common problem: Package developed built using following guides: Fan Wang: https://fanwangecon.github.io/PkgTestR/articles/ffv_pkgdown_github.html Emil Hvitfeldt: https://emilhvitfeldt.com/post/2018-09-02-usethis-workflow--package-development/ Saskia O: https://www.marinedatascience.co/blog/2020/01/09/checklist--r-package-re-submissions--cran/ handy example follow: quincunx package: https://github.com/maialab/quincunx/blob/master/vignettes/pgs-construction-process.Rmd","code":"library(TACAR) ## basic example code"},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data.frame with demographic parameters — pop01_param_poun","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"Creates data.frame parameters use subsequent population projection function (\"PopProj.R\")","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"","code":"pop01_param_poun(species = \"Podocnemis unifilis\", make_rds = FALSE)"},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"species Name species. Default \"Podocnemis unifilis\" make_rds Logical (TRUE/FALSE). .RDS format written. Default FALSE","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"Creates data.frame parameters used \"PopProj.R\".","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"function holds demographic parameters used population projections. called user, create data.frame demogrpahic parameters.","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop01_param_poun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data.frame with demographic parameters — pop01_param_poun","text":"","code":"if (FALSE) { # \\dontrun{ dfpop <- PopParam(species = \"Podocnemis unifilis\", make_rds = FALSE) } # }"},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data.frame with deterministic projection results. — pop03_doproj","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"Creates data.frame projection results use subsequent population projection function (\"PopProj.R\").","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"","code":"pop03_doproj(x)"},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"x data.frame created \"PopPrep.R\".","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"Creates data.frame projection results.","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"function applies deterministic population projection moodel.","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data.frame with deterministic projection results. — pop03_doproj","text":"","code":"if (FALSE) { # \\dontrun{ dfproj_vals <- pop03_doproj() } # }"},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"Creates data.frame projection results use subsequent population projection function (\"PopProj.R\").","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"","code":"pop03_doproj_stoch(x)"},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"x data.frame created \"PopPrep.R\".","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"Creates data.frame projection results.","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"function applies stochastic population projection moodels.","code":""},{"path":"https://darrennorris.github.io/TACAR/reference/pop03_doproj_stoch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create data.frame with stochastic projection results. — pop03_doproj_stoch","text":"","code":"if (FALSE) { # \\dontrun{ dfproj_vals <- pop03_doproj_stoch() } # }"}]
